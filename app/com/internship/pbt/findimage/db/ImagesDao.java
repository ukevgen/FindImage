package com.internship.pbt.findimage.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.internship.pbt.findimage.db.Images;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGES".
*/
public class ImagesDao extends AbstractDao<Images, Long> {

    public static final String TABLENAME = "IMAGES";

    /**
     * Properties of entity Images.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Kind = new Property(1, String.class, "kind", false, "KIND");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property HtmlTitle = new Property(3, String.class, "htmlTitle", false, "HTML_TITLE");
        public final static Property Link = new Property(4, String.class, "link", false, "LINK");
        public final static Property DisplayLink = new Property(5, String.class, "displayLink", false, "DISPLAY_LINK");
        public final static Property Snippet = new Property(6, String.class, "snippet", false, "SNIPPET");
        public final static Property HtmlSnippet = new Property(7, String.class, "htmlSnippet", false, "HTML_SNIPPET");
        public final static Property Mime = new Property(8, String.class, "mime", false, "MIME");
        public final static Property Image = new Property(9, String.class, "image", false, "IMAGE");
        public final static Property FileFormat = new Property(10, String.class, "fileFormat", false, "FILE_FORMAT");
    };


    public ImagesDao(DaoConfig config) {
        super(config);
    }
    
    public ImagesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KIND\" TEXT," + // 1: kind
                "\"TITLE\" TEXT," + // 2: title
                "\"HTML_TITLE\" TEXT," + // 3: htmlTitle
                "\"LINK\" TEXT," + // 4: link
                "\"DISPLAY_LINK\" TEXT," + // 5: displayLink
                "\"SNIPPET\" TEXT," + // 6: snippet
                "\"HTML_SNIPPET\" TEXT," + // 7: htmlSnippet
                "\"MIME\" TEXT," + // 8: mime
                "\"IMAGE\" TEXT," + // 9: image
                "\"FILE_FORMAT\" TEXT);"); // 10: fileFormat
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Images entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(2, kind);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String htmlTitle = entity.getHtmlTitle();
        if (htmlTitle != null) {
            stmt.bindString(4, htmlTitle);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String displayLink = entity.getDisplayLink();
        if (displayLink != null) {
            stmt.bindString(6, displayLink);
        }
 
        String snippet = entity.getSnippet();
        if (snippet != null) {
            stmt.bindString(7, snippet);
        }
 
        String htmlSnippet = entity.getHtmlSnippet();
        if (htmlSnippet != null) {
            stmt.bindString(8, htmlSnippet);
        }
 
        String mime = entity.getMime();
        if (mime != null) {
            stmt.bindString(9, mime);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(10, image);
        }
 
        String fileFormat = entity.getFileFormat();
        if (fileFormat != null) {
            stmt.bindString(11, fileFormat);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Images readEntity(Cursor cursor, int offset) {
        Images entity = new Images( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // kind
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // htmlTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // link
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // displayLink
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // snippet
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // htmlSnippet
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // image
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // fileFormat
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Images entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKind(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHtmlTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDisplayLink(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSnippet(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHtmlSnippet(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileFormat(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Images entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Images entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
